diff a/ArduCopter/GCS_Mavlink.pde b/ArduCopter/GCS_Mavlink.pde	(rejected hunks)
@@ -10,7 +10,7 @@ static bool do_guided(const AP_Mission::Mission_Command& cmd);
 static bool in_mavlink_delay;
 
 // true if we are out of time in our event timeslice
-static bool	gcs_out_of_time;
+static bool    gcs_out_of_time;
 
 
 // check if a message will fit in the payload space available
@@ -677,6 +677,15 @@ bool GCS_MAVLINK::try_send_message(enum ap_message id)
     case MSG_WIND:
         // unused
         break;
+        
+    case MSG_RPM_SENSOR:
+        CHECK_PAYLOAD_SIZE(RPM_SENSOR);
+        mavlink_msg_rpm_sensor_send(chan, remote_RPM);
+        // debug: send it twice as int val    
+        mavlink_msg_named_value_int_send(chan, millis(), "RPM Sensor", remote_RPM);
+        //mavlink_msg_named_value_float_send(chan, mavlink_msg_debug_get_time_boot_ms
+        break;
+                
 
     case MSG_RETRY_DEFERRED:
         break; // just here to prevent a warning
@@ -892,6 +901,7 @@ GCS_MAVLINK::data_stream_send(void)
         send_message(MSG_HWSTATUS);
         send_message(MSG_SYSTEM_TIME);
         send_message(MSG_RANGEFINDER);
+        send_message(MSG_RPM_SENSOR);   // ******* expansion *******        
     }
 }
 
@@ -1224,6 +1234,13 @@ void GCS_MAVLINK::handleMessage(mavlink_message_t* msg)
             // param4 : timeout (in seconds)
             result = mavlink_motor_test_start(chan, (uint8_t)packet.param1, (uint8_t)packet.param2, (uint16_t)packet.param3, packet.param4);
             break;
+            
+        case MAV_CMD_FRONTLIGHT:
+            nano_frontlight_auto = (packet.param1 == 2)?1:0;
+            nano_frontlight_on = (packet.param1 == 1)?1:0;
+            result = MAV_RESULT_ACCEPTED;
+            break;
+            
 
         default:
             result = MAV_RESULT_UNSUPPORTED;
